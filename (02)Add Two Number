You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8



the code:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
struct ListNode* result=NULL;
struct ListNode* p1=NULL;
struct ListNode* p2=NULL;
   
int sum;
int n=0;
int flag=0;
result = (struct student *) malloc (sizeof(struct ListNode)); 
 
p1 = (struct student *) malloc (sizeof(struct ListNode)); 
p2=p1;
    
while((l1!=NULL)&&(l2!=NULL))    //当一个单链表为空时跳出循环
{   
sum=l1->val+l2->val+flag;
flag=0;
if(sum>=10)
{
sum-=10;   
flag=1;
}    
p1->val=sum;
printf("the same length%d\n",sum);
//printf("%d\n",&p1);
n+=1;
    
if(n == 1)      //如果节点总数是1，则head指向刚创建的节点p1  
{  
    result = p1;  
    p2->next = NULL;  //此时的p2就是p1,也就是p1->next指向NULL。  
}  
else  
{  
     p2->next = p1;   //指向上次下面刚刚开辟的新节点  
}    
    

//result->next=p1;
    
l1=l1->next;
l2=l2->next;
    
if((l1==NULL)&&(l2==NULL)&&(flag==1))   //如果最后一位为0时，需对下一位进位
{
 p2=p1;
 p1 = (struct student *) malloc (sizeof(struct ListNode));  
 p1->val=1; 
 p2->next = p1;
}
p2=p1;
p1 = (struct student *) malloc (sizeof(struct ListNode));  
 
}

    
while(l1!=NULL)                //当L1的长度大于L2的长度时
{   
sum=l1->val+flag;
flag=0;
if(sum>=10)
{
sum-=10;   
flag=1;
}    
p1->val=sum;
printf("l1 bigger than l2%d\n",sum);

n+=1;
    
if(n == 1)      //如果节点总数是1，则head指向刚创建的节点p1  
{  
    result = p1;  
    p2->next = NULL;  //此时的p2就是p1,也就是p1->next指向NULL。  
}  
else  
{  
     p2->next = p1;   //指向上次下面刚刚开辟的新节点  
}    
    

//result->next=p1;
    
l1=l1->next;
if((l1==NULL)&&(flag==1))     
{
 p2=p1;
 p1 = (struct student *) malloc (sizeof(struct ListNode));  
 p1->val=1; 
 p2->next = p1;
}
p2=p1;
p1 = (struct student *) malloc (sizeof(struct ListNode));  
 
}
    
while(l2!=NULL)                  //当L2的长度大于L1的长度时
{   
sum=l2->val+flag;
 flag=0;
if(sum>=10)
{
sum-=10;   
flag=1;
}   
p1->val=sum;
printf("l2 bigger than l1%d\n",sum);

n+=1;
    
if(n == 1)      //如果节点总数是1，则head指向刚创建的节点p1  
{  
    result = p1;  
    p2->next = NULL;  //此时的p2就是p1,也就是p1->next指向NULL。  
}  
else  
{  
     p2->next = p1;   //指向上次下面刚刚开辟的新节点  
}    
    
l2=l2->next;
//result->next=p1;
if((l2==NULL)&&(flag==1))   
{
 p2=p1;
 p1 = (struct student *) malloc (sizeof(struct ListNode));  
 p1->val=1; 
 p2->next = p1;
}    


p2=p1;
p1 = (struct student *) malloc (sizeof(struct ListNode));  
 
}    
    
    
    
    
p2->next=NULL;
return result;
}
